import os
import cv2
from ultralytics import YOLO

# Directory paths
images_dir = './dataset/images/'
annotations_dir = './dataset/annotations/'

# List of image filenames in the images directory
images = os.listdir(images_dir)

# Check if annotations directory exists, create it if not
if not os.path.exists(annotations_dir):
    os.mkdir(annotations_dir)

# Initialize YOLO model
model = YOLO('runs/detect/train10/weights/best.pt')

# Iterate through each image in the images directory
for img_filename in images:
    img_path = os.path.join(images_dir, img_filename)
    img = cv2.imread(img_path)

    # Check if image reading was successful
    if img is None:
        print(f"Error: Could not read image '{img_filename}'")
        continue

    try:
        # Perform object detection with YOLO
        results = model.predict(img, agnostic_nms=True, iou=0.3)
        annotated_img = results[0].plot()

        # Display annotated image
        cv2.imshow('Annotated Image', annotated_img)
        cv2.waitKey(0)

        # Ask user to confirm annotations
        confirm = input('Confirm annotations generated by model (y/n): ').strip().lower()

        if confirm == 'y':
            # Write annotations to file
            annotations = []
            with open(os.path.join(annotations_dir, img_filename.replace('.jpg', '.txt')), 'w') as f:
                for cls, xywhn in zip(results[0].boxes.cls, results[0].boxes.xywhn):
                    line = f"{int(cls)} {round(float(xywhn[0]), 6)} {round(float(xywhn[1]), 6)} {round(float(xywhn[2]), 6)} {round(float(xywhn[3]), 6)}\n"
                    annotations.append(line)
                f.writelines(annotations)

        elif confirm == 'n':
            # Manual annotation input
            instances = int(input('Enter number of instances in the image: '))
            annotations = []
            with open(os.path.join(annotations_dir, img_filename.replace('.jpg', '.txt')), 'w') as f:
                for _ in range(instances):
                    cls_no = input('Enter class number: ').strip()
                    bbox = input('Enter bounding box (xmin ymin xmax ymax): ').strip().split()
                    
                    # Validate and parse bounding box input
                    if len(bbox) != 4:
                        print('Invalid bounding box format. Please enter in the format "xmin ymin xmax ymax".')
                        continue
                    
                    bbox = list(map(float, bbox))
                    w = (bbox[2] - bbox[0]) / img.shape[1]
                    h = (bbox[3] - bbox[1]) / img.shape[0]
                    x = (bbox[2] + bbox[0]) / (2 * img.shape[1])
                    y = (bbox[3] + bbox[1]) / (2 * img.shape[0])
                    bbox_yolo = [x, y, w, h]
                    bbox_yolo = [str(round(coord, 6)) for coord in bbox_yolo]
                    line = f"{cls_no} {' '.join(bbox_yolo)}\n"
                    annotations.append(line)
                f.writelines(annotations)

        else:
            print('Invalid input. Skipping image.')

    except Exception as e:
        print(f"Error processing image '{img_filename}': {str(e)}")

    # Close all OpenCV windows
    cv2.destroyAllWindows()



